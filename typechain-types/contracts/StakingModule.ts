/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace StakingModule {
  export type StakeStruct = {
    amount: BigNumberish;
    startTime: BigNumberish;
    duration: BigNumberish;
    withdrawn: boolean;
  };

  export type StakeStructOutput = [
    amount: bigint,
    startTime: bigint,
    duration: bigint,
    withdrawn: boolean
  ] & {
    amount: bigint;
    startTime: bigint;
    duration: bigint;
    withdrawn: boolean;
  };
}

export interface StakingModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "APRate"
      | "calculateReward"
      | "changeApr"
      | "getTotalRewards"
      | "getUserStake"
      | "maxNumStakesPerUser"
      | "owner"
      | "ownerAddTokens"
      | "ownerWithdrawTokens"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setTotalStakeLimit"
      | "setUserStakeLimit"
      | "stake"
      | "token"
      | "totalStakeLimit"
      | "totalStakedAmount"
      | "transferOwnership"
      | "unpause"
      | "unstake"
      | "userPerStakeLimit"
      | "userStakes"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DurationExtended"
      | "EmergencyStopActivated"
      | "EmergencyStopDeactivated"
      | "OwnershipTransferred"
      | "Paused"
      | "Staked"
      | "TokensAdded"
      | "TokensWithdrawn"
      | "Unpaused"
      | "Unstake"
  ): EventFragment;

  encodeFunctionData(functionFragment: "APRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeApr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxNumStakesPerUser",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerAddTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalStakeLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserStakeLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStakeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userPerStakeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userStakes",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "APRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeApr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxNumStakesPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerAddTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalStakeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserStakeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPerStakeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userStakes", data: BytesLike): Result;
}

export namespace DurationExtendedEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    indexOfStake: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    userAddress: string,
    indexOfStake: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    userAddress: string;
    indexOfStake: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyStopActivatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyStopDeactivatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    amountStaked: BigNumberish
  ];
  export type OutputTuple = [userAddress: string, amountStaked: bigint];
  export interface OutputObject {
    userAddress: string;
    amountStaked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensAddedEvent {
  export type InputTuple = [ownerAddress: AddressLike, amount: BigNumberish];
  export type OutputTuple = [ownerAddress: string, amount: bigint];
  export interface OutputObject {
    ownerAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensWithdrawnEvent {
  export type InputTuple = [ownerAddress: AddressLike, amount: BigNumberish];
  export type OutputTuple = [ownerAddress: string, amount: bigint];
  export interface OutputObject {
    ownerAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeEvent {
  export type InputTuple = [
    userAddress: AddressLike,
    amountUnstaked: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    userAddress: string,
    amountUnstaked: bigint,
    reward: bigint
  ];
  export interface OutputObject {
    userAddress: string;
    amountUnstaked: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakingModule extends BaseContract {
  connect(runner?: ContractRunner | null): StakingModule;
  waitForDeployment(): Promise<this>;

  interface: StakingModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  APRate: TypedContractMethod<[], [bigint], "view">;

  calculateReward: TypedContractMethod<
    [_amount: BigNumberish, _duration: BigNumberish],
    [bigint],
    "view"
  >;

  changeApr: TypedContractMethod<[newApr: BigNumberish], [void], "nonpayable">;

  getTotalRewards: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserStake: TypedContractMethod<
    [user: AddressLike, indexOfStake: BigNumberish],
    [StakingModule.StakeStructOutput],
    "view"
  >;

  maxNumStakesPerUser: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerAddTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  ownerWithdrawTokens: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setTotalStakeLimit: TypedContractMethod<
    [_limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  setUserStakeLimit: TypedContractMethod<
    [_limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<
    [_amount: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  totalStakeLimit: TypedContractMethod<[], [bigint], "view">;

  totalStakedAmount: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unstake: TypedContractMethod<
    [indexOfStake: BigNumberish],
    [void],
    "nonpayable"
  >;

  userPerStakeLimit: TypedContractMethod<[], [bigint], "view">;

  userStakes: TypedContractMethod<
    [stakeHolder: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        amount: bigint;
        startTime: bigint;
        duration: bigint;
        withdrawn: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "APRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateReward"
  ): TypedContractMethod<
    [_amount: BigNumberish, _duration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeApr"
  ): TypedContractMethod<[newApr: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTotalRewards"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStake"
  ): TypedContractMethod<
    [user: AddressLike, indexOfStake: BigNumberish],
    [StakingModule.StakeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxNumStakesPerUser"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerAddTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ownerWithdrawTokens"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalStakeLimit"
  ): TypedContractMethod<[_limit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUserStakeLimit"
  ): TypedContractMethod<[_limit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [_amount: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalStakeLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalStakedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[indexOfStake: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPerStakeLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "userStakes"
  ): TypedContractMethod<
    [stakeHolder: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        amount: bigint;
        startTime: bigint;
        duration: bigint;
        withdrawn: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "DurationExtended"
  ): TypedContractEvent<
    DurationExtendedEvent.InputTuple,
    DurationExtendedEvent.OutputTuple,
    DurationExtendedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyStopActivated"
  ): TypedContractEvent<
    EmergencyStopActivatedEvent.InputTuple,
    EmergencyStopActivatedEvent.OutputTuple,
    EmergencyStopActivatedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyStopDeactivated"
  ): TypedContractEvent<
    EmergencyStopDeactivatedEvent.InputTuple,
    EmergencyStopDeactivatedEvent.OutputTuple,
    EmergencyStopDeactivatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "TokensAdded"
  ): TypedContractEvent<
    TokensAddedEvent.InputTuple,
    TokensAddedEvent.OutputTuple,
    TokensAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokensWithdrawn"
  ): TypedContractEvent<
    TokensWithdrawnEvent.InputTuple,
    TokensWithdrawnEvent.OutputTuple,
    TokensWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Unstake"
  ): TypedContractEvent<
    UnstakeEvent.InputTuple,
    UnstakeEvent.OutputTuple,
    UnstakeEvent.OutputObject
  >;

  filters: {
    "DurationExtended(address,uint256,uint256)": TypedContractEvent<
      DurationExtendedEvent.InputTuple,
      DurationExtendedEvent.OutputTuple,
      DurationExtendedEvent.OutputObject
    >;
    DurationExtended: TypedContractEvent<
      DurationExtendedEvent.InputTuple,
      DurationExtendedEvent.OutputTuple,
      DurationExtendedEvent.OutputObject
    >;

    "EmergencyStopActivated()": TypedContractEvent<
      EmergencyStopActivatedEvent.InputTuple,
      EmergencyStopActivatedEvent.OutputTuple,
      EmergencyStopActivatedEvent.OutputObject
    >;
    EmergencyStopActivated: TypedContractEvent<
      EmergencyStopActivatedEvent.InputTuple,
      EmergencyStopActivatedEvent.OutputTuple,
      EmergencyStopActivatedEvent.OutputObject
    >;

    "EmergencyStopDeactivated()": TypedContractEvent<
      EmergencyStopDeactivatedEvent.InputTuple,
      EmergencyStopDeactivatedEvent.OutputTuple,
      EmergencyStopDeactivatedEvent.OutputObject
    >;
    EmergencyStopDeactivated: TypedContractEvent<
      EmergencyStopDeactivatedEvent.InputTuple,
      EmergencyStopDeactivatedEvent.OutputTuple,
      EmergencyStopDeactivatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Staked(address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "TokensAdded(address,uint256)": TypedContractEvent<
      TokensAddedEvent.InputTuple,
      TokensAddedEvent.OutputTuple,
      TokensAddedEvent.OutputObject
    >;
    TokensAdded: TypedContractEvent<
      TokensAddedEvent.InputTuple,
      TokensAddedEvent.OutputTuple,
      TokensAddedEvent.OutputObject
    >;

    "TokensWithdrawn(address,uint256)": TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;
    TokensWithdrawn: TypedContractEvent<
      TokensWithdrawnEvent.InputTuple,
      TokensWithdrawnEvent.OutputTuple,
      TokensWithdrawnEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Unstake(address,uint256,uint256)": TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;
    Unstake: TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;
  };
}
