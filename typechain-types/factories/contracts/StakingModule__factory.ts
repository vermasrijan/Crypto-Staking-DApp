/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  StakingModule,
  StakingModuleInterface,
} from "../../contracts/StakingModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_apr",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_userStakeLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_totalStakeLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxNumStakesPerUser",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyUnstaked",
    type: "error",
  },
  {
    inputs: [],
    name: "EnforcedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "ExceedingNumberOfStakes",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpectedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidApr",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDuration",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidStakeIndex",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "StakeAmountLessThanOrEqualToZero",
    type: "error",
  },
  {
    inputs: [],
    name: "StakeExceedsLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "StakingPeriodNotOver",
    type: "error",
  },
  {
    inputs: [],
    name: "TotalStakeExceedsLimit",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "indexOfStake",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "DurationExtended",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "EmergencyStopActivated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "EmergencyStopDeactivated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amountStaked",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "ownerAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "ownerAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokensWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amountUnstaked",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
    ],
    name: "Unstake",
    type: "event",
  },
  {
    inputs: [],
    name: "APRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
    ],
    name: "calculateReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newApr",
        type: "uint256",
      },
    ],
    name: "changeApr",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getTotalRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "indexOfStake",
        type: "uint256",
      },
    ],
    name: "getUserStake",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "duration",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "withdrawn",
            type: "bool",
          },
        ],
        internalType: "struct StakingModule.Stake",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxNumStakesPerUser",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ownerAddTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ownerWithdrawTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_limit",
        type: "uint256",
      },
    ],
    name: "setTotalStakeLimit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_limit",
        type: "uint256",
      },
    ],
    name: "setUserStakeLimit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_duration",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStakeLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStakedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "indexOfStake",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "userPerStakeLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stakeHolder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "userStakes",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "withdrawn",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200217f3803806200217f8339818101604052810190620000379190620002f8565b83600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ad5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a49190620003a5565b60405180910390fd5b620000be816200014a60201b60201c565b50600180819055506000600260006101000a81548160ff02191690831515021790555085600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600481905550826006819055508160078190555080600881905550505050505050620003c2565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002408262000213565b9050919050565b6000620002548262000233565b9050919050565b620002668162000247565b81146200027257600080fd5b50565b60008151905062000286816200025b565b92915050565b6000819050919050565b620002a1816200028c565b8114620002ad57600080fd5b50565b600081519050620002c18162000296565b92915050565b620002d28162000233565b8114620002de57600080fd5b50565b600081519050620002f281620002c7565b92915050565b60008060008060008060c087890312156200031857620003176200020e565b5b60006200032889828a0162000275565b96505060206200033b89828a01620002b0565b95505060406200034e89828a01620002e1565b94505060606200036189828a01620002b0565b93505060806200037489828a01620002b0565b92505060a06200038789828a01620002b0565b9150509295509295509295565b6200039f8162000233565b82525050565b6000602082019050620003bc600083018462000394565b92915050565b611dad80620003d26000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806368ba5112116100c357806393ae18ac1161007c57806393ae18ac1461032a578063aaac6d7e14610348578063b5d5b5fa14610366578063cec695fa14610399578063f2fde38b146103c9578063fc0c546a146103e55761014d565b806368ba5112146102a4578063715018a6146102c05780637b0472f0146102ca5780638456cb59146102e65780638da5cb5b146102f0578063922f21231461030e5761014d565b80633a03f85c116101155780633a03f85c146102085780633f4ba83a14610226578063567e98f91461023057806356a4c7261461024e5780635c975abb1461026a57806360972120146102885761014d565b8063038d1fba1461015257806313ed08461461016e57806325d850e51461019e5780632bcf161c146101bc5780632e17de78146101ec575b600080fd5b61016c60048036038101906101679190611818565b610403565b005b61018860048036038101906101839190611845565b61044f565b6040516101959190611894565b60405180910390f35b6101a66104b4565b6040516101b39190611894565b60405180910390f35b6101d660048036038101906101d1919061190d565b6104ba565b6040516101e39190611894565b60405180910390f35b61020660048036038101906102019190611818565b61062a565b005b610210610b6b565b60405161021d9190611894565b60405180910390f35b61022e610b71565b005b610238610baf565b6040516102459190611894565b60405180910390f35b61026860048036038101906102639190611818565b610bb5565b005b610272610ce1565b60405161027f9190611955565b60405180910390f35b6102a2600480360381019061029d9190611818565b610cf8565b005b6102be60048036038101906102b99190611818565b610e22565b005b6102c8610e6e565b005b6102e460048036038101906102df9190611845565b610e82565b005b6102ee6111d6565b005b6102f8611214565b604051610305919061197f565b60405180910390f35b61032860048036038101906103239190611818565b61123d565b005b61033261128a565b60405161033f9190611894565b60405180910390f35b610350611290565b60405161035d9190611894565b60405180910390f35b610380600480360381019061037b919061199a565b611296565b60405161039094939291906119da565b60405180910390f35b6103b360048036038101906103ae919061199a565b6112f0565b6040516103c09190611a92565b60405180910390f35b6103e360048036038101906103de919061190d565b61141e565b005b6103ed6114a4565b6040516103fa9190611b0c565b60405180910390f35b61040b6114ca565b60008111610445576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060068190555050565b6000806301e187e0670de0b6b3a76400008461046b9190611b56565b6104759190611bc7565b9050600069021e19e0c9bab240000082600454876104939190611b56565b61049d9190611b56565b6104a79190611bc7565b9050809250505092915050565b60085481565b6000806000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561058957838290600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250508152602001906001019061051e565b50505050905060005b815181101561061f578181815181106105ae576105ad611bf8565b5b602002602001015160600151610612576106048282815181106105d4576105d3611bf8565b5b6020026020010151600001518383815181106105f3576105f2611bf8565b5b60200260200101516040015161044f565b8361060f9190611c27565b92505b8080600101915050610592565b508192505050919050565b610632611551565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081106106ad576040517fcf468e4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110610700576106ff611bf8565b5b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090506000816000015111610792576040517f0b8cdfe400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060600151156107ce576040517fd831531200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806040015181602001516107e29190611c27565b42101561081b576040517f2b5059b000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061082f8260000151836040015161044f565b905060008183600001516108439190611c27565b905060008360000151905080600560008282546108609190611c5b565b9250508190555060018460600190151590811515815250506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060018261090b9190611c5b565b8154811061091c5761091b611bf8565b5b9060005260206000209060040201600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020878154811061097b5761097a611bf8565b5b90600052602060002090600402016000820154816000015560018201548160010155600282015481600201556003820160009054906101000a900460ff168160030160006101000a81548160ff021916908315150217905550905050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480610a2657610a25611c8f565b5b6001900381819060005260206000209060040201600080820160009055600182016000905560028201600090556003820160006101000a81549060ff021916905550509055600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610ac8929190611cbe565b6020604051808303816000875af1158015610ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0b9190611d13565b50813373ffffffffffffffffffffffffffffffffffffffff167ff960dbf9e5d0682f7a298ed974e33a28b4464914b7a2bfac12ae419a9afeb28086604051610b539190611894565b60405180910390a35050505050610b68611597565b50565b60045481565b610b796114ca565b610b816115a0565b7f8aecbeb9f7203ec3dc62d2b9d20d5bcd70fe3808addcd647fc09e8b648441d9260405160405180910390a1565b60055481565b610bbd6114ca565b60008111610bf7576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610c5693929190611d40565b6020604051808303816000875af1158015610c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c999190611d13565b50803373ffffffffffffffffffffffffffffffffffffffff167f0eaac1064ee8d13f83091f388597ffb5ff2d2e59f6a16aae2a74ba7f2d13c8d960405160405180910390a350565b6000600260009054906101000a900460ff16905090565b610d006114ca565b60008111610d3a576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d97929190611cbe565b6020604051808303816000875af1158015610db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dda9190611d13565b50803373ffffffffffffffffffffffffffffffffffffffff167f6352c5382c4a4578e712449ca65e83cdb392d045dfcf1cad9615189db2da244b60405160405180910390a350565b610e2a6114ca565b60008111610e64576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060078190555050565b610e766114ca565b610e806000611603565b565b610e8a6116c7565b600854600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905010610f07576040517f2d4a830e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008211610f41576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008111610f7b576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654821115610fb7576040517f83ddb26900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60075482600554610fc89190611c27565b1115611000576040517fea3b369600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060800160405280848152602001428152602001838152602001600015158152509050826005600082825461103a9190611c27565b92505081905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055505050600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161114993929190611d40565b6020604051808303816000875af1158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c9190611d13565b50823373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60405160405180910390a3505050565b6111de6114ca565b6111e6611708565b7f4e360eaf5c2a0e4ebb03155da87ffa096252cc2ec66db5848b4ef13e99172bbd60405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6112456114ca565b6064811015611280576040517f76c22a2200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060048190555050565b60075481565b60065481565b600360205281600052604060002081815481106112b257600080fd5b9060005260206000209060040201600091509150508060000154908060010154908060020154908060030160009054906101000a900460ff16905084565b6112f86117b3565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508210611373576040517fcf468e4300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106113c4576113c3611bf8565b5b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff161515151581525050905092915050565b6114266114ca565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114985760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161148f919061197f565b60405180910390fd5b6114a181611603565b50565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114d261176b565b73ffffffffffffffffffffffffffffffffffffffff166114f0611214565b73ffffffffffffffffffffffffffffffffffffffff161461154f5761151361176b565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611546919061197f565b60405180910390fd5b565b60026001540361158d576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b6115a8611773565b6000600260006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6115ec61176b565b6040516115f9919061197f565b60405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6116cf610ce1565b15611706576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6117106116c7565b6001600260006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861175461176b565b604051611761919061197f565b60405180910390a1565b600033905090565b61177b610ce1565b6117b1576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60405180608001604052806000815260200160008152602001600081526020016000151581525090565b600080fd5b6000819050919050565b6117f5816117e2565b811461180057600080fd5b50565b600081359050611812816117ec565b92915050565b60006020828403121561182e5761182d6117dd565b5b600061183c84828501611803565b91505092915050565b6000806040838503121561185c5761185b6117dd565b5b600061186a85828601611803565b925050602061187b85828601611803565b9150509250929050565b61188e816117e2565b82525050565b60006020820190506118a96000830184611885565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118da826118af565b9050919050565b6118ea816118cf565b81146118f557600080fd5b50565b600081359050611907816118e1565b92915050565b600060208284031215611923576119226117dd565b5b6000611931848285016118f8565b91505092915050565b60008115159050919050565b61194f8161193a565b82525050565b600060208201905061196a6000830184611946565b92915050565b611979816118cf565b82525050565b60006020820190506119946000830184611970565b92915050565b600080604083850312156119b1576119b06117dd565b5b60006119bf858286016118f8565b92505060206119d085828601611803565b9150509250929050565b60006080820190506119ef6000830187611885565b6119fc6020830186611885565b611a096040830185611885565b611a166060830184611946565b95945050505050565b611a28816117e2565b82525050565b611a378161193a565b82525050565b608082016000820151611a536000850182611a1f565b506020820151611a666020850182611a1f565b506040820151611a796040850182611a1f565b506060820151611a8c6060850182611a2e565b50505050565b6000608082019050611aa76000830184611a3d565b92915050565b6000819050919050565b6000611ad2611acd611ac8846118af565b611aad565b6118af565b9050919050565b6000611ae482611ab7565b9050919050565b6000611af682611ad9565b9050919050565b611b0681611aeb565b82525050565b6000602082019050611b216000830184611afd565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b61826117e2565b9150611b6c836117e2565b9250828202611b7a816117e2565b91508282048414831517611b9157611b90611b27565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bd2826117e2565b9150611bdd836117e2565b925082611bed57611bec611b98565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611c32826117e2565b9150611c3d836117e2565b9250828201905080821115611c5557611c54611b27565b5b92915050565b6000611c66826117e2565b9150611c71836117e2565b9250828203905081811115611c8957611c88611b27565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000604082019050611cd36000830185611970565b611ce06020830184611885565b9392505050565b611cf08161193a565b8114611cfb57600080fd5b50565b600081519050611d0d81611ce7565b92915050565b600060208284031215611d2957611d286117dd565b5b6000611d3784828501611cfe565b91505092915050565b6000606082019050611d556000830186611970565b611d626020830185611970565b611d6f6040830184611885565b94935050505056fea2646970667358221220b7fcc56b007300b5d002b03d8f9280a33b494751d59d132d9352dd375ffaf37c64736f6c63430008180033";

type StakingModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingModule__factory extends ContractFactory {
  constructor(...args: StakingModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _token: AddressLike,
    _apr: BigNumberish,
    owner: AddressLike,
    _userStakeLimit: BigNumberish,
    _totalStakeLimit: BigNumberish,
    _maxNumStakesPerUser: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _token,
      _apr,
      owner,
      _userStakeLimit,
      _totalStakeLimit,
      _maxNumStakesPerUser,
      overrides || {}
    );
  }
  override deploy(
    _token: AddressLike,
    _apr: BigNumberish,
    owner: AddressLike,
    _userStakeLimit: BigNumberish,
    _totalStakeLimit: BigNumberish,
    _maxNumStakesPerUser: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _token,
      _apr,
      owner,
      _userStakeLimit,
      _totalStakeLimit,
      _maxNumStakesPerUser,
      overrides || {}
    ) as Promise<
      StakingModule & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): StakingModule__factory {
    return super.connect(runner) as StakingModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingModuleInterface {
    return new Interface(_abi) as StakingModuleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): StakingModule {
    return new Contract(address, _abi, runner) as unknown as StakingModule;
  }
}
